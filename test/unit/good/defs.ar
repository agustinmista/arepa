(module foo
  ;; value declarations + bare literals
  (val pi 3)
  (val e  2.71)
  (val x  'x')
  (val hw "hello, world!")
  ;; function definition + peculiar identifiers
  (fun main   ()    (print hw))
  (fun double (x)   (+ x x))
  (fun square (x)   (* x x))
  (fun minus  (x y) (- x y))
  ;; data constructors
  (val list-123 
    ({1,2} 1 
      ({1,2} 2 
        ({1,2} 3 
          {0,0}))))
  ;; lambda expressions
  (val K   (lambda x (lambda y x)))
  (val K42 (lambda x 42))
  ;; let expressions
  (fun abc (x) 
    (let 
      ((y 10)
       (z 20))
      (foo x (+ y z))))
  (val is-23-odd? 
    (letrec 
      ((odd (lambda n 
        (case n 
          ((0 {1,0})
           (_ (even (abs (- n 1)))))))) 
       (even (lambda n
        (case n 
          ((0 {0,0}) 
           (_ (odd (abs (- n 1))))))))) 
      (odd 23)))
  ;; case statement
  (fun fib (n) 
    (case n 
      ((0 0)
       (1 1)
       (_ (+ (fib (- n 1) (- n 2)))))))
  ;; case statement with constructors
  (fun last (def xs)
    (case xs 
      ((({0,0})      def)
       (({1,2} y ys) (last ys)))))
)