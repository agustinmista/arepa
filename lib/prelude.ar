(module prelude

  ;; ----------------------------------------
  ;; Primitive operation wrappers
  ;; ----------------------------------------

  ;; Int arithmetic
  ;; Int -> Int -> Int
  (fun + (x y) (__prim_add_int__ x y))
  (fun - (x y) (__prim_sub_int__ x y))
  (fun * (x y) (__prim_mul_int__ x y))
  (fun / (x y) (__prim_div_int__ x y))
  (fun % (x y) (__prim_mod_int__ x y))

  ;; Double arithmetic
  ;; Double -> Double -> Double
  (fun .+ (x y) (__prim_add_double__ x y))
  (fun .- (x y) (__prim_sub_double__ x y))
  (fun .* (x y) (__prim_mul_double__ x y))
  (fun ./ (x y) (__prim_div_double__ x y))

  ;; String opearations
  ;; String -> String -> String
  (fun strcat (x y) (__prim_concat_string__ x y))
  ;; String -> Int
  (fun strlen (x) (__prim_length_string__ x))
  ;; (Int|Double|Bool|Unit) -> String
  (fun show_int    (x) (__prim_int_to_string__ x))
  (fun show_double (x) (__prim_double_to_string__ x))
  (fun show_bool   (x) (__prim_bool_to_string__ x))
  (fun show_unit   (x) (__prim_unit_to_string__ x))

  ;; Int comparison operators
  ;; Int -> Int -> Bool
  (fun =  (x y) (__prim_eq_int__ x y))
  (fun <= (x y) (__prim_le_int__ x y))
  (fun <  (x y) (__prim_lt_int__ x y))
  (fun >= (x y) (__prim_le_int__ y x))
  (fun >  (x y) (__prim_lt_int__ y x))

  ;; Double comparison operators
  ;; Double -> Double -> Bool
  (fun .=  (x y) (__prim_eq_double__ x y))
  (fun .<= (x y) (__prim_le_double__ x y))
  (fun .<  (x y) (__prim_lt_double__ x y))
  (fun .>= (x y) (__prim_le_double__ y x))
  (fun .>  (x y) (__prim_lt_double__ y x))

  ;; String comparison operators
  ;; String -> String -> Bool
  (fun equals (x y) (__prim_eq_string__ x y))

  ;; Constants
  ;; Double
  (val PI __prim_pi__)

  ;; ----------------------------------------
  ;; List operations
  ;; ----------------------------------------

  ;; [a] -> a
  (fun head (xs)
    (case xs
      (({cons,2} y ys)  y)))

  ;; [a] -> [a]
  (fun tail (xs)
    (case xs
      (({cons,2} y ys)  ys)))

  ;; [a] -> [a] -> [a]
  (fun <> (xs ys)
    (case xs
      ({nil,0}           ys)
      (({cons,2} x xs')  ({cons,2} x (<> xs' ys)))))

  ;; a -> [a]
  (fun singleton (x)
    ({cons,2} x {nil,2}))

  ;; [a] -> Int
  (fun length (xs)
    (case xs
      ({nil,0}          0)
      (({cons,2} y ys)  (+ 1 (length ys)))))

  ;; (a -> b) -> [a] -> [b]
  (fun map (f xs)
    (case xs
      ({nil,0}          {nil,0})
      (({cons,2} y ys)  ({cons,2} (f y) (map f ys)))))

  ;; [a] -> Int -> a
  (fun ! (xs n)
    (if (= 0 n)
        (head xs)
        (! (tail xs) (- n 1))))

  ;; Int -> [a] -> [a]
  (fun take (n xs)
    (if (= n 0)
      {nil,0}
      (case xs
        (({nil,0})        {nil,0})
        (({cons,2} y ys)  ({cons,2} y (take (- n 1) ys))))))

  ;; (a -> b -> c) -> [a] -> [b] -> [c]
  (fun zipWith (f l1 l2)
    (case l1
      (({nil,0})
        {nil,0})
      (({cons,2} x xs)
        (case l2
          (({nil,0})        {nil,0})
          (({cons,2} y ys)  ({cons,2} (f x y) (zipWith f xs ys)))))))

  ;; [a] -> [b] -> [(a,b)]
  (fun zip (xs ys)
    (zipWith {pair,2} xs ys))

  ;; [Int] -> Int
  (fun sum (xs)
    (case xs
      (({nil,0})        0)
      (({cons,2} y ys)  (+ y (sum ys)))))

  ;; ----------------------------------------
  ;; IO interface
  ;; ----------------------------------------

  ;; IO a -> a
  (fun run_io (ioa)
    (case (ioa unit)
      (({pair,2} a rw) (seq rw a))))

  ;; a -> IO a
  (fun return (x)
    (lambda (rw)
      ({pair,2} x rw)))

  ;; IO a -> (a -> IO b) -> IO b
  (fun >>= (m k)
    (lambda (rw)
      (case (m rw)
        (({pair,2} a rw') (k a rw')))))

  ;; IO a -> IO b -> IO b
  (fun >> (m k)
    (>>= m (lambda (x) k)))

  ;; ----------------------------------------
  ;; IO operations
  ;; ----------------------------------------

  ;; IO String
  (val io_read_line
    (lambda (rw)
      (let ((str __prim_read_line__))
        (seq str ({pair,2} str rw)))))

  ;; String -> IO String
  (fun io_read_file (path)
    (lambda (rw)
      (let ((str (__prim_read_file__ path)))
        (seq str ({pair,2} str rw)))))

  ;; String -> String -> IO Unit
  (fun io_write_file (path data)
    (lambda (rw)
      (let ((str (__prim_write_file__ path data)))
        (seq str ({pair,2} str rw)))))

  ;; Int -> IO Unit
  (fun io_print_int (n)
    (lambda (rw)
      (let ((u (__prim_print_int__ n)))
        (seq u ({pair,2} u rw)))))

  ;; Double -> IO Unit
  (fun io_print_double (n)
    (lambda (rw)
      (let ((u (__prim_print_double__ n)))
        (seq u ({pair,2} u rw)))))

  ;; String -> IO Unit
  (fun io_print_string (str)
    (lambda (rw)
      (let ((u (__prim_print_string__ str)))
        (seq u ({pair,2} u rw)))))

  ;; Bool -> IO Unit
  (fun io_print_bool (b)
    (lambda (rw)
      (let ((u (__prim_print_bool__ b)))
        (seq u ({pair,2} u rw)))))

  ;; Unit -> IO Unit
  (fun io_print_unit (u)
    (lambda (rw)
      (let ((u' (__prim_print_unit__ u)))
        (seq u' ({pair,2} u' rw)))))

  ;; ----------------------------------------
  ;; Debugging
  ;; ----------------------------------------

  ;; forall a. Prim a => a -> a
  (fun trace_int    (x) (__prim_trace_int__ x))
  (fun trace_double (x) (__prim_trace_double__ x))
  (fun trace_string (x) (__prim_trace_string__ x))
  (fun trace_bool   (x) (__prim_trace_bool__ x))
  (fun trace_unit   (x) (__prim_trace_unit__ x))

)